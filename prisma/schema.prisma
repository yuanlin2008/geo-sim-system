// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////////////////////////////////////////////////////////////////
// Account
//////////////////////////////////////////////////////////////////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  /// Is Adnim
  isAdmin Boolean?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////////////////////////////////////////////////////////
// Data Model
//////////////////////////////////////////////////////////////////////////////
/// 枚举元数据.
model MetaEnum {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  desc          String
  /// 从属于此enum的所有item.
  items         MetaEnumItem[] @relation("MetaEnum.items")
  /// 此enum类型的所有MetaField
  metaFieldRefs MetaField[]    @relation("MetaField.typeEnum")
}

/// 枚举项元数据.
model MetaEnumItem {
  id        Int         @id @default(autoincrement())
  name      String
  desc      String
  /// Owner
  owner     MetaEnum    @relation("MetaEnum.items", fields: [ownerId], references: [id])
  ownerId   Int
  /// 此项的所有DataField
  fieldRefs DataField[] @relation("DataField.enumValue")
}

/// 结构体元数据
model MetaStruct {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  desc          String
  metaFields    MetaField[]  @relation("MetaStruct.metaFields")
  /// 此类型的所有MetaField
  metaFieldRefs MetaField[]  @relation("MetaField.typeStruct")
  /// 此MetaStruct的所有DataStruct.
  dataStructs   DataStruct[] @relation("DataStruct.meta")
}

/// 字段类型.
enum MetaFieldType {
  Int
  Float
  String
  Enum
  Ref
}

/// 字段元数据
model MetaField {
  id           Int           @id @default(autoincrement())
  name         String
  desc         String
  /// Owner
  owner        MetaStruct    @relation("MetaStruct.metaFields", fields: [ownerId], references: [id])
  ownerId      Int
  /// Type
  type         MetaFieldType
  typeEnum     MetaEnum?     @relation("MetaField.typeEnum", fields: [typeEnumId], references: [id])
  typeEnumId   Int?
  typeStruct   MetaStruct?   @relation("MetaField.typeStruct", fields: [typeStructId], references: [id])
  typeStructId Int?
  isArray      Boolean
  /// 此MetaField的所有DataField.
  dataFields   DataField[]   @relation("DataField.meta")
}

/// 结构体数据
model DataStruct {
  id            Int         @id @default(autoincrement())
  name          String      @unique
  desc          String
  // Meta
  meta          MetaStruct  @relation("DataStruct.meta", fields: [metaId], references: [id])
  metaId        Int
  /// Fields belong to this struct.
  dataFields    DataField[] @relation("DataStruct.dataFields")
  /// Fields referencing this struct.
  dataFieldRefs DataField[] @relation("DataField.refValue")
}

/// 字段数据
model DataField {
  id          Int           @id @default(autoincrement())
  /// Meta Info
  meta        MetaField     @relation("DataField.meta", fields: [metaId], references: [id])
  metaId      Int
  /// Owner
  owner       DataStruct    @relation("DataStruct.dataFields", fields: [ownerId], references: [id])
  ownerId     Int
  // Values.
  valueInt    Int
  valueFloat  Float
  valueString String
  valueEnum   MetaEnumItem? @relation("DataField.enumValue", fields: [valueEnumId], references: [id])
  valueEnumId Int?
  valueRef    DataStruct?   @relation("DataField.refValue", fields: [valueRefId], references: [id])
  valueRefId  Int?
  // Array.
  arrayId     Int
}
